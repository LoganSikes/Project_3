#include <iostream>
#include <vector>
#include <random>
#include <iomanip>
using namespace std;

// This is just a helper function to swap 2 values in the vector when using the insertion sort algorithm
template <typename T>
void swap(T &A, float j, float j_incr) {
    float temp = A[j];
    A[j] = A[j_incr];
    A[j_incr] = temp;
}

// InsertionSort, modified to apply to ShellSort's algorithm
// Used the template from the online textbook
template <typename T>
void InsertionSort(T &A, int start, int incr, int n) {
    for (int i = start+incr; i < n; i += incr)
        for (int j = i; ((j >= incr) && (A[j] < A[j-incr])); j -= incr)
            swap(A, j, j-incr);
}

// ShellSort, used template from online textbook for class
// Made to take in a vector of int,float or double
// IMPORTANT this ShellSort doesn't return a value but takes in a reference to a vector<T> and will save the changes made to the vector
// I had to make the function take in a reference because of the way the algorithm works, yes there is possibly a way to return a value however, upon returning a value, it will break out of any loop its currently in which is not what we want
template <typename T>
void ShellSort(T &A, int n) {
// Will pass in powers of 2 for the increment down to 2
    for (int i = n/2; i > 2; i /= 2)  // For each increment
        for (int j = 0; j < i; j++)  // Sort each sublist
            InsertionSort(A, j, i, n);
// Does normal insertion sort with 1 as the increment to compare all the values in the vector and swap them if need be
    InsertionSort(A, 0, 1, n);
}

// MergeSort, used template from online textbook for class.
// Made to take in a vector of int,float or double
// Is called in the MergeSort function to break the lists down into smalled vectors until you have only <= 1 numbers in each vector to compare
template <typename T>
T Merge(T list1, T list2) {
// Declaring new vector of type T to combine the 2 sub vectors in sorted order
    T sorted;
// Declaring some ints to help keep track of the size and positions of each of the indexes for the vectors as they traverse along them
    int count1 = 0;
    int count2 = 0;
    int size1 = list1.size();
    int size2 = list2.size();
// Will iterate over the vectors until it has compared all the elements within them
    while (count1 < size1 || count2 < size2) {
// Adds the numbers in the second list if the first list doesn't have any numbers left to compare
        if (count1 == size1) {
            sorted.push_back(list2[count2]);
            count2++;
        }
// Adds the numbers in the first list if the second list doesn't have any numbers left to compare
        else if (count2 == size2) {
            sorted.push_back(list1[count1]);
            count1++;
        }
// Comparing two numbers
        else if (list1[count1] <= list2[count2]) {
            sorted.push_back(list1[count1++]);
        }
// The opposite of the above if statement is false
        else
            sorted.push_back(list2[count2++]);
    }
    return sorted;
}

// MergeSort
// Made to take in a vector of int,float or double
// IMPORTANT to note that the MergeSort here returns a data type(vector<T>) with T being any data type that was passed in
template <typename T>
T MergeSort(T inlist) {
// If there is only <= 1 elements in the list then return the list as it is already sorted
    if (inlist.size() <= 1)
        return inlist;
// Declaring two new sub vectors one with the first half and the other with the second half until
    T list1;
    T list2;
    for (int i = 0; i < inlist.size(); i++) {
        if (i < inlist.size()/2)
            list1.push_back(inlist[i]);
        else
            list2.push_back(inlist[i]);
    }
// Recursive call to MergeSort until both of the new vectors are of size <= 1
    return Merge(MergeSort(list1), MergeSort(list2));
}

// For Printing Out The Sorted Lists
template <typename T>
void PrintList(T list, int size) {
    for (int i = 0; i < size; i++)
        cout << fixed << setprecision(5) << list[i] << " ";
}
int main() {
// Main is solely for testing purposes, the algorithms can take in a float, double, int, long, any numerical value
// Random number generation for testing purposes, get accurate results
// Declared
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<int> distribution_int(0,100);
    uniform_int_distribution<long> distribution_long(0,100);
    uniform_real_distribution<double> distribution_double(0.00, 100.00);
    uniform_real_distribution<float> distribution_float(0.0f,100.0f);

// This might not be used in the actual implementation because here I have I finite set of lines to read whereas in the project it would be n songs
    int num = 0;
    cin >> num;

// Declaring the initial vector here
// Need to change the data type inside the vector according to input.
    vector<float> list1;

// For loop to add n number of elements to the unsorted list all with random values
// If you want to test using different data types, replace the distribution_float with distribution_it or _double as declared above, will need to change the datatype of the number being pushed below ... float number -> datatype number = distribution_datatype(gen)
    for (int i = 0; i < num; i++) {
        float number = distribution_float(gen);
        list1.push_back(number);
    }

// Made a new vector called sorted_MergeSort and passed the orig list1 into the function
// vector<datatype> needs to match the above data types or data could potentially be lost between sorting algorithms
    vector<float> sorted_MergeSort = MergeSort(list1);
// Printing the sorted list using the MergeSort Algorithm
    PrintList(sorted_MergeSort, sorted_MergeSort.size());
    cout << endl;

// Since the ShellSort uses a reference we don't need to declare another vector to set the ShellSort function to as it will change the values within passed in vector directly and will show the changes in the main
    ShellSort(list1, list1.size());
// Printing the sorted list using the ShellSort algorithm

    PrintList(list1,list1.size());
    cout << endl;

    return 0;
}
